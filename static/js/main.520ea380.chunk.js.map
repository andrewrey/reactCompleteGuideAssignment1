{"version":3,"sources":["Header/index.js","MainContent/GuestInput/index.js","MainContent/GuestName/index.js","MainContent/Output/index.js","MainContent/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","GuestInput","handleName","handleSubmit","pendingGuest","type","placeholder","onChange","value","onClick","GuestName","name","removeName","Output","guests","map","guest","key","id","MainContent","App","state","lastId","updateIDNumber","handleNameInput","e","console","log","target","setState","handleRemoveName","filter","handleNameSubmit","alert","this","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTAgBeA,G,YAbA,WACb,OACE,gCACE,gDACA,wBAAIC,UAAU,YACZ,oCACA,qCACA,6CCCOC,G,MATI,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,WAAYC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC9C,OACE,yBAAKJ,UAAU,iBACb,2BAAOK,KAAK,OAAOC,YAAY,gBAAgBC,SAAUL,EAAYM,MAAOJ,IAC5E,4BAAQK,QAASN,GAAjB,aCMSO,EAVG,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WACzB,OACE,yBAAKZ,UAAU,aACb,4BACGW,EADH,IACS,uBAAGX,UAAU,sBAAsBS,QAAS,kBAAMG,EAAWD,SCO7DE,EAVA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,OAAQF,EAAiB,EAAjBA,WACxB,OACE,yBAAKZ,UAAU,cACZc,EAAOC,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,CAAWL,KAAMK,EAAML,KAAMC,WAAY,SAACD,GAAD,OAAUC,EAAWD,IAAOM,IAAKD,EAAME,UCKzEC,EAPK,SAAC,GAAD,IAAGjB,EAAH,EAAGA,WAAYC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAAcU,EAA3C,EAA2CA,OAAQF,EAAnD,EAAmDA,WAAnD,OAClB,8BACE,0CACA,kBAAC,EAAD,CAAYV,WAAYA,EAAYC,aAAcA,EAAcC,aAAcA,IAC9E,kBAAC,EAAD,CAAQU,OAAQA,EAAQF,WAAYA,MC6CzBQ,E,4MAhDbC,MAAQ,CACNjB,aAAc,GACdU,OAAQ,I,EAGVQ,OAAS,E,EAETC,eAAiB,WACf,IAAIL,EAAK,EAAKI,OAEd,OADA,EAAKA,QAAU,EACRJ,G,EAGTM,gBAAkB,SAACC,GACjBC,QAAQC,IAAIF,EAAEG,OAAOpB,OACrB,EAAKqB,SAAS,CACZzB,aAAcqB,EAAEG,OAAOpB,S,EAI3BsB,iBAAmB,SAACnB,GAClB,EAAKkB,SAAS,CACZf,OAAQ,EAAKO,MAAMP,OAAOiB,QAAO,SAACf,GAAD,OAAWA,EAAML,OAASA,Q,EAI/DqB,iBAAmB,SAACrB,GAClB,GAAa,KAATA,EACFsB,MAAM,4BACD,CACL,IAAIf,EAAK,EAAKK,iBACd,EAAKM,SAAS,CACZf,OAAO,CAAE,CAAEH,OAAMO,OAAX,mBAAoB,EAAKG,MAAMP,SACrCV,aAAc,O,uDAMlB,OACE,yBAAKJ,UAAW,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAaE,WAAYgC,KAAKV,gBAAiBrB,aAAc+B,KAAKF,iBAAiBG,KAAKD,KAAMA,KAAKb,MAAMjB,cAAeA,aAAc8B,KAAKb,MAAMjB,aAAcU,OAAQoB,KAAKb,MAAMP,OAAQF,WAAYsB,KAAKJ,wB,GA3CjMM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.520ea380.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.scss\";\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>First Assignment</h1>\n      <ul className=\"headerUL\">\n        <li>Home</li>\n        <li>About</li>\n        <li>Resources</li>\n      </ul>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst GuestInput = ({ handleName, handleSubmit, pendingGuest }) => {\n  return (\n    <div className=\"input-wrapper\">\n      <input type=\"text\" placeholder=\"Enter name...\" onChange={handleName} value={pendingGuest} />\n      <button onClick={handleSubmit}>Submit</button>\n    </div>\n  );\n};\n\nexport default GuestInput;\n","import React from \"react\";\n\nconst GuestName = ({ name, removeName }) => {\n  return (\n    <div className=\"guestCard\">\n      <h3>\n        {name} <i className=\"fas fa-times-circle\" onClick={() => removeName(name)} />\n      </h3>\n    </div>\n  );\n};\n\nexport default GuestName;\n","import React from \"react\";\nimport GuestName from \"../GuestName\";\n\nconst Output = ({ guests, removeName }) => {\n  return (\n    <div className=\"guest-list\">\n      {guests.map((guest) => (\n        <GuestName name={guest.name} removeName={(name) => removeName(name)} key={guest.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default Output;\n","import React from \"react\";\nimport \"./MainContent.scss\";\nimport GuestInput from \"./GuestInput\";\nimport Output from \"./Output\";\n\nconst MainContent = ({ handleName, handleSubmit, pendingGuest, guests, removeName }) => (\n  <main>\n    <h2>Guest List</h2>\n    <GuestInput handleName={handleName} handleSubmit={handleSubmit} pendingGuest={pendingGuest} />\n    <Output guests={guests} removeName={removeName} />\n  </main>\n);\nexport default MainContent;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Header from \"./Header\";\nimport MainContent from \"./MainContent\";\n\nclass App extends Component {\n  state = {\n    pendingGuest: \"\",\n    guests: [],\n  };\n\n  lastId = 0;\n\n  updateIDNumber = () => {\n    let id = this.lastId;\n    this.lastId += 1;\n    return id;\n  };\n\n  handleNameInput = (e) => {\n    console.log(e.target.value);\n    this.setState({\n      pendingGuest: e.target.value,\n    });\n  };\n\n  handleRemoveName = (name) => {\n    this.setState({\n      guests: this.state.guests.filter((guest) => guest.name !== name),\n    });\n  };\n\n  handleNameSubmit = (name) => {\n    if (name === \"\") {\n      alert(\"Please enter a name!\");\n    } else {\n      let id = this.updateIDNumber();\n      this.setState({\n        guests: [{ name, id }, ...this.state.guests],\n        pendingGuest: \"\",\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className={\"App\"}>\n        <Header />\n        <MainContent handleName={this.handleNameInput} handleSubmit={this.handleNameSubmit.bind(this, this.state.pendingGuest)} pendingGuest={this.state.pendingGuest} guests={this.state.guests} removeName={this.handleRemoveName} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}